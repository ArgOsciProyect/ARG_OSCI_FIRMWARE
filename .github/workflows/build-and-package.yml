name: Build and Package

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger
  
permissions:
  contents: write  # Required for release asset uploads
  packages: write  # If you're publishing packages

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pyserial pillow
          
      - name: Build with PyInstaller
        run: |
          # Use PNG instead of ICO since Pillow will convert it
          pyinstaller --onefile --windowed --add-data "ARG_OSCI_ICON.png;." --icon=ARG_OSCI_ICON.png --name ARG_OSCI_Installer installer/installer.py
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-exe
          path: dist/ARG_OSCI_Installer.exe
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: dist/ARG_OSCI_Installer.exe

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pyserial
          
      - name: Install AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2 
          
      - name: Build with PyInstaller
        run: |
          # Use the correct path to the installer script
          pyinstaller --onefile --add-data "ARG_OSCI_ICON.png:." --name ARG_OSCI_Installer installer/installer.py
          
      - name: Create AppDir structure
        run: |
          # Set app name for consistency
          APP_NAME="ARG_OSCI_Installer"
          
          # Create standard AppDir structure
          mkdir -p AppDir/usr/{bin,share/{applications,icons/hicolor/256x256/apps}}
          
          # Copy executable to AppDir
          cp dist/ARG_OSCI_Installer AppDir/usr/bin/
          chmod +x AppDir/usr/bin/ARG_OSCI_Installer
          
          # Copy icon
          cp ARG_OSCI_ICON.png AppDir/usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png
          
          # Create desktop file (must be named exactly as the app)
          cat > AppDir/${APP_NAME}.desktop << EOF
          [Desktop Entry]
          Type=Application
          Name=ARG_OSCI Installer
          Comment=Firmware installer for ARG_OSCI oscilloscope
          Exec=$APP_NAME
          Icon=$APP_NAME
          Categories=Development;Electronics;
          Terminal=false
          EOF
          
          # Copy desktop file to standard location
          cp AppDir/${APP_NAME}.desktop AppDir/usr/share/applications/
          
          # Create AppRun script (must be in AppDir root)
          cat > AppDir/AppRun << 'EOL'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          export PATH="${HERE}/usr/bin:${PATH}"
          export LD_LIBRARY_PATH="${HERE}/usr/lib:${LD_LIBRARY_PATH}"
          exec "${HERE}/usr/bin/ARG_OSCI_Installer" "$@"
          EOL
          chmod +x AppDir/AppRun
          
          # Link the icon to root for AppImage to find it
          ln -sf usr/share/icons/hicolor/256x256/apps/${APP_NAME}.png AppDir/${APP_NAME}.png
          
          # List contents of AppDir for debugging
          echo "Content of AppDir:"
          find AppDir -type f | sort
          
      - name: Download AppImage tools
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
      - name: Build AppImage
        run: |
          # Create the AppImage with --no-appstream to bypass validation
          ARCH=x86_64 ./appimagetool-x86_64.AppImage --no-appstream -v AppDir ARG_OSCI_Installer-x86_64.AppImage
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-appimage
          path: ARG_OSCI_Installer-x86_64.AppImage
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ARG_OSCI_Installer-x86_64.AppImage