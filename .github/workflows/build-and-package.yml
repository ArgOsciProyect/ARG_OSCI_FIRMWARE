name: Build and Package

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pyserial
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --windowed --add-data "ARG_OSCI_ICON.png;." --icon=ARG_OSCI_ICON.png --name ARG_OSCI_Installer installer.py
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: windows-exe
          path: dist/ARG_OSCI_Installer.exe
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: dist/ARG_OSCI_Installer.exe

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pyserial
          
      - name: Install AppImage tools
        run: |
          sudo apt-get update
          sudo apt-get install -y fuse libfuse2 
          
      - name: Build with PyInstaller
        run: |
          pyinstaller --onefile --add-data "ARG_OSCI_ICON.png:." --name ARG_OSCI_Installer installer.py
          
      - name: Create AppDir structure
        run: |
          mkdir -p AppDir/usr/bin
          mkdir -p AppDir/usr/share/applications
          mkdir -p AppDir/usr/share/icons/hicolor/256x256/apps
          
          # Copy executable to AppDir
          cp dist/ARG_OSCI_Installer AppDir/usr/bin/
          
          # Create desktop entry
          echo "[Desktop Entry]
          Name=ARG_OSCI Installer
          Exec=ARG_OSCI_Installer
          Icon=ARG_OSCI_ICON
          Type=Application
          Categories=Development;Electronics;" > AppDir/usr/share/applications/ARG_OSCI_Installer.desktop
          
          # Copy icon
          cp ARG_OSCI_ICON.png AppDir/usr/share/icons/hicolor/256x256/apps/ARG_OSCI_ICON.png
          
      - name: Download AppImage tools
        run: |
          wget -q https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          
      - name: Build AppImage
        run: |
          # Create AppRun script
          cat > AppDir/AppRun << 'EOL'
          #!/bin/bash
          HERE="$(dirname "$(readlink -f "${0}")")"
          exec "$HERE/usr/bin/ARG_OSCI_Installer" "$@"
          EOL
          chmod +x AppDir/AppRun
          
          # Create the AppImage
          ./appimagetool-x86_64.AppImage AppDir ARG_OSCI_Installer-x86_64.AppImage
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: linux-appimage
          path: ARG_OSCI_Installer-x86_64.AppImage
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        with:
          files: ARG_OSCI_Installer-x86_64.AppImage

  publish-to-github-packages:
    needs: [build-windows, build-linux]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: dist
          
      - name: Setup GitHub Packages
        run: |
          echo "Publishing to GitHub Packages"
          echo "GITHUB_TOKEN=${{ secrets.GITHUB_TOKEN }}"
          
      - name: Upload packages to GitHub Packages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create release assets
          echo "Creating release assets..."
          
          # For Windows
          if [ -f "dist/windows-exe/ARG_OSCI_Installer.exe" ]; then
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @dist/windows-exe/ARG_OSCI_Installer.exe \
              "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/${{ github.event.release.id }}/assets?name=ARG_OSCI_Installer.exe"
          fi
          
          # For Linux
          if [ -f "dist/linux-appimage/ARG_OSCI_Installer-x86_64.AppImage" ]; then
            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @dist/linux-appimage/ARG_OSCI_Installer-x86_64.AppImage \
              "https://uploads.github.com/repos/$GITHUB_REPOSITORY/releases/${{ github.event.release.id }}/assets?name=ARG_OSCI_Installer-x86_64.AppImage"
          fi