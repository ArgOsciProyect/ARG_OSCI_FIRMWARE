name: Build and Package

on:
  release:
    types: [created]
  workflow_dispatch:  # Allows manual trigger
  
permissions:
  contents: write  # Required for release asset uploads
  packages: write  # If you're publishing packages

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller requests pyserial pillow pywin32
  
      - name: Build digital signature information
        run: |
          # Create version info file
          echo 'VSVersionInfo(
            ffi=FixedFileInfo(
              filevers=(1, 0, 0, 0),
              prodvers=(1, 0, 0, 0),
              mask=0x3f,
              flags=0x0,
              OS=0x40004,
              fileType=0x1,
              subtype=0x0,
              date=(0, 0)
            ),
            kids=[
              StringFileInfo(
                [
                  StringTable(
                    u"040904B0",
                    [StringStruct(u"CompanyName", u"ARG_OSCI Project"),
                    StringStruct(u"FileDescription", u"ARG_OSCI Firmware Installer"),
                    StringStruct(u"FileVersion", u"1.0.0"),
                    StringStruct(u"InternalName", u"ARG_OSCI_Installer"),
                    StringStruct(u"LegalCopyright", u"© 2025 ARG_OSCI Project"),
                    StringStruct(u"OriginalFilename", u"ARG_OSCI_Installer.exe"),
                    StringStruct(u"ProductName", u"ARG_OSCI Firmware Installer"),
                    StringStruct(u"ProductVersion", u"0.3.0")])
                ]
              ),
              VarFileInfo([VarStruct(u"Translation", [0x0409, 1200])])
            ]
          )' > version_info.txt
          
      - name: Build with PyInstaller
        shell: cmd
        run: |
          rem Use more conservative build options
          pyinstaller --onefile --windowed ^
            --version-file=version_info.txt ^
            --add-data "ARG_OSCI_ICON.png;." ^
            --icon=ARG_OSCI_ICON.png ^
            --name ARG_OSCI_Installer ^
            --exclude-module _bootlocale ^
            --exclude-module pytest ^
            --noupx ^
            installer/installer.py
            
      - name: Create installation instructions
        run: |
          echo "# ARG_OSCI Firmware Installer
          
          ## Installation Instructions
          
          1. Extract all files from this ZIP archive
          2. Double-click on ARG_OSCI_Installer.exe to run the installer
          
          ## Note About Security Warnings
          
          Windows SmartScreen or your antivirus may flag this installer as potentially unsafe because it's an unsigned application.
          This is a common false positive for applications built with PyInstaller.
          
          To run the installer:
          1. If Windows SmartScreen appears, click 'More info' and then 'Run anyway'
          2. If your antivirus blocks it, you may need to temporarily disable it or add an exception
          
          ## About ARG_OSCI
          
          The ARG_OSCI is an open-source oscilloscope project that transforms your ESP32 into a versatile signal analyzer.
          
          This installer will:
          - Download and configure the ESP32 firmware
          - Set up the ESP-IDF development environment
          - Flash the firmware to your ESP32 device
          
          For more information and source code, visit [our GitHub repository](https://github.com/ArgOsciProyect/ARG_OSCI_FIRMWARE)
          " | Out-File -Encoding utf8 README.txt
          
      - name: Generate file hashes
        run: |
          # Create hashes file for verification
          echo "# File Hashes for Verification" > VERIFY.txt
          echo "Generated on: $(Get-Date)" >> VERIFY.txt
          echo "" >> VERIFY.txt
          echo "## SHA-256" >> VERIFY.txt
          certutil -hashfile dist/ARG_OSCI_Installer.exe SHA256 | Out-File -Append -Encoding utf8 VERIFY.txt
            
      - name: Create ZIP package
        run: |
          # Create release directory
          mkdir release
          copy dist\ARG_OSCI_Installer.exe release\
          copy README.txt release\
          copy VERIFY.txt release\
          copy ARG_OSCI_ICON.png release\
          
          # Create ZIP file
          Compress-Archive -Path release\* -DestinationPath ARG_OSCI_Installer_Windows.zip -Force
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-package
          path: ARG_OSCI_Installer_Windows.zip
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ARG_OSCI_Installer_Windows.zip

  build-linux:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests pyserial pillow
      
      - name: Create installation instructions
        run: |
          cat > README.txt << 'EOF'
          # ARG_OSCI Firmware Installer for Linux
  
          ## Installation Instructions
  
          1. Extract all files from this ZIP archive
          2. Open a terminal in the directory containing the extracted files
          3. Run the helper script: `./run.sh`
          
          ## Requirements
          
          The installer needs the following:
          - Python 3.6 or higher
          - Python packages: tkinter, requests, pyserial, pillow
          - Git (for downloading ESP-IDF)
          
          The run.sh script will check for these requirements and help you install them if needed.
          
          ## About ARG_OSCI
          
          The ARG_OSCI is an open-source oscilloscope project that transforms your ESP32 into a versatile signal analyzer.
          
          For more information and source code, visit [our GitHub repository](https://github.com/ArgOsciProyect/ARG_OSCI_FIRMWARE)
          EOF
          
      - name: Create comprehensive helper script
        run: |
          cat > run.sh << 'EOF'
          #!/bin/bash
          # ARG_OSCI Installer Launcher
          
          # Get the directory this script is in
          SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
          PYTHON_SCRIPT="${SCRIPT_DIR}/installer.py"
          ICON="${SCRIPT_DIR}/ARG_OSCI_ICON.png"
          
          # Text formatting
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[0;33m'
          BLUE='\033[0;34m'
          BOLD='\033[1m'
          NORM='\033[0m'
          
          echo -e "${BLUE}${BOLD}ARG_OSCI Installer Launcher${NORM}\n"
          echo -e "This script will help you run the ARG_OSCI installer.\n"
          
          # Check for required system tools
          check_dependency() {
            local cmd=$1
            local package=$2
            local install_cmd=$3
            
            if ! command -v $cmd &> /dev/null; then
              echo -e "${YELLOW}Warning: $cmd is not installed${NORM}"
              echo -e "This may be needed for proper operation of the installer."
              echo -e "Install it with: ${BOLD}$install_cmd${NORM}"
              return 1
            else
              echo -e "${GREEN}✓ $cmd is installed${NORM}"
              return 0
            fi
          }
          
          echo -e "${BOLD}Checking system dependencies...${NORM}"
          
          # Distribution detection
          if [ -f /etc/os-release ]; then
            . /etc/os-release
            DISTRO=$NAME
            echo -e "Detected distribution: ${BOLD}$DISTRO${NORM}"
          else
            DISTRO="Unknown"
            echo -e "Unknown distribution"
          fi
          
          # Set package installation commands based on distribution
          if command -v apt-get &> /dev/null; then
            # Debian/Ubuntu
            PYTHON_INSTALL="sudo apt-get install -y python3 python3-pip"
            GIT_INSTALL="sudo apt-get install -y git"
            TKINTER_INSTALL="sudo apt-get install -y python3-tk"
          elif command -v dnf &> /dev/null; then
            # Fedora/RHEL
            PYTHON_INSTALL="sudo dnf install -y python3 python3-pip"
            GIT_INSTALL="sudo dnf install -y git"
            TKINTER_INSTALL="sudo dnf install -y python3-tkinter"
          elif command -v pacman &> /dev/null; then
            # Arch Linux
            PYTHON_INSTALL="sudo pacman -S --noconfirm python python-pip"
            GIT_INSTALL="sudo pacman -S --noconfirm git"
            TKINTER_INSTALL="sudo pacman -S --noconfirm python-tk"
          elif command -v zypper &> /dev/null; then
            # openSUSE
            PYTHON_INSTALL="sudo zypper install -y python3 python3-pip"
            GIT_INSTALL="sudo zypper install -y git"
            TKINTER_INSTALL="sudo zypper install -y python3-tk"
          else
            echo -e "${YELLOW}Warning: Unable to determine package manager for your distribution.${NORM}"
            echo -e "You may need to manually install dependencies if the installer fails."
            PYTHON_INSTALL="Please install Python 3 manually"
            GIT_INSTALL="Please install Git manually"
            TKINTER_INSTALL="Please install Python Tkinter manually"
          fi
          
          # Check for Python
          check_dependency python3 "Python 3" "$PYTHON_INSTALL"
          PYTHON_OK_STATUS=$?
          
          # Check for Git (needed for ESP-IDF)
          check_dependency git "Git" "$GIT_INSTALL"
          GIT_OK_STATUS=$?
          
          echo -e "\n${BOLD}Checking Python packages...${NORM}"
          
          # Function to check if a Python package is installed
          check_python_package() {
            local package=$1
            if python3 -c "import $package" &>/dev/null; then
              echo -e "${GREEN}✓ Python package '$package' is installed${NORM}"
              return 0
            else
              echo -e "${YELLOW}Warning: Python package '$package' is not installed${NORM}"
              return 1
            fi
          }
          
          # Check essential Python packages
          MISSING_PACKAGES=0
          check_python_package tkinter || MISSING_PACKAGES=1
          check_python_package requests 2>/dev/null || MISSING_PACKAGES=1
          check_python_package serial 2>/dev/null || MISSING_PACKAGES=1
          check_python_package PIL 2>/dev/null || MISSING_PACKAGES=1
          
          # If Python packages are missing, try to install them
          if [ "$MISSING_PACKAGES" -eq 1 ]; then
            echo -e "\n${YELLOW}Some required Python packages are missing.${NORM}"
            echo -e "Installing missing packages..."
            
            # Install pip packages
            python3 -m pip install --user requests pyserial pillow
            
            # Install tkinter if missing (requires system package)
            if ! python3 -c "import tkinter" &>/dev/null; then
              echo -e "${YELLOW}Tkinter is required but cannot be installed via pip.${NORM}"
              echo -e "Install it with: ${BOLD}$TKINTER_INSTALL${NORM}"
              
              # Ask if user wants to install tkinter
              read -p "Would you like to try installing tkinter now? (y/n) " -n 1 -r
              echo
              if [[ $REPLY =~ ^[Yy]$ ]]; then
                eval $TKINTER_INSTALL
              fi
            fi
          fi
          
          echo -e "\n${BOLD}Launching installer...${NORM}"
          
          # Run the installer script
          if [ -f "$PYTHON_SCRIPT" ]; then
            # Check if icon exists and copy if needed to ensure script finds it
            if [ -f "$ICON" ]; then
              cp "$ICON" "$(dirname "$PYTHON_SCRIPT")/" 2>/dev/null
            fi
            
            # Run the installer
            cd "$SCRIPT_DIR"
            python3 "$PYTHON_SCRIPT"
            exit $?
          else
            echo -e "${RED}Error: Installer script not found at $PYTHON_SCRIPT${NORM}"
            exit 1
          fi
          EOF
          chmod +x run.sh
          
      - name: Create ZIP package
        run: |
          # Create verification file
          echo "# File Hashes for Verification" > VERIFY.txt
          echo "Generated on: $(date)" >> VERIFY.txt
          echo "" >> VERIFY.txt
          echo "## SHA-256" >> VERIFY.txt
          sha256sum installer/installer.py >> VERIFY.txt
          
          # Package everything together
          mkdir release
          cp installer/installer.py release/
          cp ARG_OSCI_ICON.png release/
          cp run.sh release/
          cp README.txt release/
          cp VERIFY.txt release/
          
          cd release
          zip -r ../ARG_OSCI_Installer_Linux.zip ./*
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer-package
          path: ARG_OSCI_Installer_Linux.zip
          
      - name: Upload to release
        if: github.event_name == 'release'
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ARG_OSCI_Installer_Linux.zip